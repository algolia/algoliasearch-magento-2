<?php

/** @var \Algolia\AlgoliaSearch\Block\Adminhtml\LandingPage\SearchConfiguration $block */

$configHelper = $block->getConfigHelper();

$indexName = $block->getCoreHelper()->getBaseIndexName();

$landingPage = $block->getLandingPage();
$landingPageId = $landingPage->getId();

$isConfig = [
    'appId' => $configHelper->getApplicationID(),
    'apiKey' => $configHelper->getSearchOnlyAPIKey(),
    'indexName' => $configHelper->getIndexPrefix() . 'default_products',
    'routing' => false,
    'facets' => $configHelper->getFacets(),
    'priceKey' => '.' . $configHelper->getCurrencyCode() . '.default',
    'maxValuesPerFacet' => (int) $configHelper->getMaxValuesPerFacet(),
    'searchParameters' => [
        'hitsPerPage' => 20,
        'getRankingInfo' => true,
        'ruleContexts' => [
            '',
            'magento-landing-page-' . $landingPageId,
        ],
        'facetFilters' => [
        ],
    ],
];

?>

<div id="algolia_merchandising_search_box"></div>
<div id="algolia_merchandising_hits"></div>
<div id="algolia_merchandising_facet_wrapper"></div>

<input type="hidden" name="algolia_merchandising_positions" value="" data-form-part="algolia_algoliasearch_landingpage_form" />

<script type="text/template" id="algolia_merchandising_all_items_template">
    <div class="with-facets" id="algolia_instant_selector">
        <div>
            <p>
                On this page you see the exact products in the exact order
                as your customers see it on the landing page.<br>
                Drag & drop products to a specific position and pin it there to have the product displayed always in this position.
            </p>
            <p>
                Merchandising will create <a href="https://www.algolia.com/doc/guides/query-rules/query-rules-overview/" target="_blank">1 query rule</a>
                for each merchandised landing page. Each Algolia plan has a <a href="https://www.algolia.com/pricing" target="_blank">query rules quota</a>,
                which cannot be exceeded.<br>
                Query rule is created only when a landing page contains at least one "pinned" product.
                When there are no "pinned" products, no query rule is created.
            </p>
        </div>
        <br>
        <label for="algolia_merchandising_autocomplete">
            <input type="text" id="algolia_merchandising_autocomplete" placeholder="Add another item to promote ..." />
        </label>

        <div class="algolia_merchandising_items_left_container" id="algolia_merchandising_items_left_container">
        </div>

        <div class="admin__data-grid-wrap admin__data-grid-wrap-static algolia_merchandising_items_table">
            <table class="data-grid">
                <thead>
                <tr>
                    <th class="data-grid-th">Position</th>
                    <th class="data-grid-th">Image</th>
                    <th class="data-grid-th">ID</th>
                    <th class="data-grid-th">SKU</th>
                    <th class="data-grid-th">Name</th>
                    <th class="data-grid-th">Price</th>
                    <th class="data-grid-th">Pin it</th>
                </tr>
                </thead>
                <tbody>
                {{#hits}}
                <tr data-objectid="{{ objectID }}" {{#_rankingInfo.promoted}}class="pinned"{{/_rankingInfo.promoted}}>
                <td class="position_cell">
                    <span class="padlock"></span>
                    <span class="draggable-handle"></span>
                </td>
                <td class="image_cell"><img src="{{ image_url }}" width="57" /></td>
                <td>{{ objectID }}</td>
                <td>{{{ _highlightResult.sku.value }}}</td>
                <td>{{{ _highlightResult.name.value }}}</td>
                <td>{{ price.<?php echo $configHelper->getCurrencyCode() ?>.default_formated }}</td>
                <td class="actions">
                    <div class="pin_block">
                        <a class="arrow up" href="#">
                            <svg xmlns="http://www.w3.org/2000/svg" width="11" height="14" viewBox="0 0 11 14">
                                <path fill="#888" fill-rule="nonzero" d="M10.065 6.724c-.038.102-.125.169-.222.169h-3.55v6.834c0 .15-.108.273-.24.273H4.04c-.133 0-.24-.122-.24-.273V6.893H.24c-.098 0-.185-.067-.223-.168a.302.302 0 0 1 .052-.298L4.864.955a.227.227 0 0 1 .17-.08c.065 0 .126.029.17.08l4.809 5.471a.3.3 0 0 1 .052.298z"/>
                            </svg>
                            ️</a>
                        <a href="#" class="pinIt">PIN HERE</a>
                        <a href="#" class="unpinIt">UN-PIN</a>
                        <a class="arrow down" href="#">
                            <svg xmlns="http://www.w3.org/2000/svg" width="11" height="14" viewBox="0 0 11 14">
                                <path fill="#888" fill-rule="nonzero" d="M10.065 7.276c-.038-.102-.125-.169-.222-.169h-3.55V.273c0-.15-.108-.273-.24-.273H4.04c-.133 0-.24.122-.24.273v6.834H.24c-.098 0-.185.067-.223.168a.302.302 0 0 0 .052.298l4.794 5.472c.046.051.107.08.17.08a.228.228 0 0 0 .17-.08l4.809-5.471a.3.3 0 0 0 .052-.298z"/>
                            </svg>
                        </a>
                    </div>
                </td>
                </tr>
                {{/hits}}
                </tbody>
            </table>
        </div>
    </div>
</script>

<script type="text/template" id="algolia_merchandising_no_results">
    <div class="algolia_merchandising_no_results messages">
        <div class="message message-warning warning">
            Algolia didn't find any products in this landing page.
            If there are supposed to be some products, please reindex Products indexer.
        </div>
    </div>
</script>

<script type="text/template" id="algolia_merchandisign_table_row">
    <tr data-objectid="{{ objectID }}">
        <td class="position_cell">
            <span class="padlock"></span>
            <span class="draggable-handle"></span>
        </td>
        <td class="image_cell"><img src="{{ image_url }}" width="60" /></td>
        <td>{{ objectID }}</td>
        <td>{{{ sku }}}</td>
        <td>{{{ name }}}</td>
        <td>{{ price.<?php echo $configHelper->getCurrencyCode() ?>.default_formated }}</td>
        <td class="actions">
            <div class="pin_block">
                <a class="arrow up" href="#">
                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="14" viewBox="0 0 11 14">
                        <path fill="#888" fill-rule="nonzero" d="M10.065 6.724c-.038.102-.125.169-.222.169h-3.55v6.834c0 .15-.108.273-.24.273H4.04c-.133 0-.24-.122-.24-.273V6.893H.24c-.098 0-.185-.067-.223-.168a.302.302 0 0 1 .052-.298L4.864.955a.227.227 0 0 1 .17-.08c.065 0 .126.029.17.08l4.809 5.471a.3.3 0 0 1 .052.298z"/>
                    </svg>
                    ️</a>
                <a href="#" class="pinIt">PIN HERE</a>
                <a href="#" class="unpinIt">UN-PIN</a>
                <a class="arrow down" href="#">
                    <svg xmlns="http://www.w3.org/2000/svg" width="11" height="14" viewBox="0 0 11 14">
                        <path fill="#888" fill-rule="nonzero" d="M10.065 7.276c-.038-.102-.125-.169-.222-.169h-3.55V.273c0-.15-.108-.273-.24-.273H4.04c-.133 0-.24.122-.24.273v6.834H.24c-.098 0-.185.067-.223.168a.302.302 0 0 0 .052.298l4.794 5.472c.046.051.107.08.17.08a.228.228 0 0 0 .17-.08l4.809-5.471a.3.3 0 0 0 .052-.298z"/>
                    </svg>
                </a>
            </div>
        </td>
    </tr>
</script>

<script type="text/template" id="algolia_merchandising_autocomplete_hit">
    <div class="algoliasearch-autocomplete-hit">
        <div class="thumb"><img src="{{ image_url }}" /></div>

        <div class="info">
            {{{ _highlightResult.name.value }}}
            <div class="price">
                {{ price.<?php echo $configHelper->getCurrencyCode() ?>.default_formated }}
            </div>
        </div>

        <a href="#" class="pinIt">
            PIN THIS PRODUCT
        </a>
        <div class="algolia-clearfix"></div>
    </div>
    <hr />
</script>

<script type="text/template" id="refinements-lists-item-template">
    <div class="{{cssClasses.label}} {{#isRefined}}checked{{/isRefined}}">
        <input class="{{cssClasses.checkbox}}" {{#isRefined}}checked{{/isRefined}} type="checkbox">
        {{value}}
        <span class="{{cssClasses.count}}">{{count}}</span>
    </div>
</script>

<script type="text/template" id="current-refinements-template">
    <div class="cross-wrapper">
        <span class="clear-cross clear-refinement"></span>
    </div>
    <div class="current-refinement-wrapper">
        {{#label}}
        <span class="current-refinement-label">{{label}}{{^operator}}:{{/operator}}</span>
        {{/label}}
        {{#operator}}
        {{{displayOperator}}}
        {{/operator}}
        {{#exclude}}-{{/exclude}}
        <span class="current-refinement-name">{{name}}</span>
    </div>
</script>

<script>
  requirejs(['algoliaAdminBundle'], function (algoliaAdminBundle) {
    algoliaAdminBundle.$(function ($) {
      var config = <?php echo json_encode($isConfig); ?>;

      var search = algoliaAdminBundle.instantsearch(<?php echo json_encode($isConfig); ?>);
      var facetWrapper = document.getElementById('algolia_merchandising_facet_wrapper');

      // initialize SearchBox
      // search.addWidget(
      //    algoliaAdminBundle.instantsearch.widgets.searchBox({
      //        container: '#algolia_merchandising_search_box',
      //        placeholder: 'Search for products',
      //        reset: false,
      //        magnifier: false
      //    })
      // );

      // initialize hits widget
      search.addWidget(
        algoliaAdminBundle.instantsearch.widgets.hits({
          container: '#algolia_merchandising_hits',
          transformData: {
            allItems: function(res) {
              var positions = {};
              for (var i = 0; i < res.hits.length; i++) {
                var hit = res.hits[i],
                  pinned = false;

                if (hit._rankingInfo.promoted === true) {
                  positions[hit.objectID] = i;
                  pinned = true;
                }

                res.hits[i]['pinned'] = true;
              }

              $('input[name="algolia_merchandising_positions"]').val(JSON.stringify(positions));

              return res;
            }
          },
          templates: {
            allItems: $('#algolia_merchandising_all_items_template').html(),
            empty: $('#algolia_merchandising_no_results').html()
          },
          escapeHits: true
        })
      );


      window.getFacetWidget = function (facet, templates) {

        // if (facet.type === 'priceRanges') {
        //   delete templates.item;
        //
        //   return ['priceRanges', {
        //     container: facet.wrapper.appendChild(createISWidgetContainer(facet.attribute)),
        //     attributeName: facet.attribute,
        //     labels: {
        //       currency: algoliaConfig.currencySymbol,
        //       separator: algoliaConfig.translations.to,
        //       button: algoliaConfig.translations.go
        //     },
        //     templates: templates,
        //     cssClasses: {
        //       root: 'facet conjunctive'
        //     }
        //   }];
        // }

        if (facet.type === 'conjunctive') {
          var refinementListOptions = {
            container: facet.wrapper.appendChild(createISWidgetContainer(facet.attribute)),
            attributeName: facet.attribute,
            limit: config.maxValuesPerFacet,
            operator: 'and',
            templates: templates,
            sortBy: ['count:desc', 'name:asc'],
            cssClasses: {
              root: 'facet conjunctive'
            }
          };

          refinementListOptions = addSearchForFacetValues(facet, refinementListOptions);

          return ['refinementList', refinementListOptions];
        }

        if (facet.type === 'disjunctive') {
          var refinementListOptions = {
            container: facet.wrapper.appendChild(createISWidgetContainer(facet.attribute)),
            attributeName: facet.attribute,
            limit: config.maxValuesPerFacet,
            operator: 'or',
            templates: templates,
            sortBy: ['count:desc', 'name:asc'],
            cssClasses: {
              root: 'facet disjunctive'
            }
          };

          refinementListOptions = addSearchForFacetValues(facet, refinementListOptions);

          return ['refinementList', refinementListOptions];
        }

        if (facet.type === 'slider') {
          delete templates.item;

          return ['rangeSlider', {
            container: facet.wrapper.appendChild(createISWidgetContainer(facet.attribute)),
            attributeName: facet.attribute,
            templates: templates,
            cssClasses: {
              root: 'facet slider'
            }
          }];
        }
      };

      function addSearchForFacetValues(facet, options) {
        if (facet.searchable === '1') {
          options['searchForFacetValues'] = {
            placeholder: '',
            templates: {
              noResults: '<div class="sffv-no-results">No Result</div>'
            }
          };
        }

        return options;
      }


      $.each(config.facets, function (i, facet) {

        if (facet.attribute.indexOf("price") !== -1)
          facet.attribute = facet.attribute + config.priceKey;

        facet.wrapper = facetWrapper;

        var templates = {
          header: '<div class="name">' + (facet.label ? facet.label : facet.attribute) + '</div>',
          item: $('#refinements-lists-item-template').html()
        };

        var widgetInfo = getFacetWidget(facet, templates);

        var widgetType = widgetInfo[0],
          widgetConfig = widgetInfo[1];

        search.addWidget(algoliaAdminBundle.instantsearch.widgets[widgetType](widgetConfig));

      });


      search.on('render', function() {
        initAutocomplete();
        addFacetsToSearch();
        initSortableTable();
      });

      search.start();

      $(document).on('click', '.algolia_merchandising_items_table a.pinIt', function(e) {
        var $row = $(this).closest('tr');
        pinIt($row);

        e.preventDefault();
        return false;
      });

      $(document).on('click', '.algolia_merchandising_items_table a.unpinIt', function(e) {
        $(this).closest('tr').removeClass('pinned');

        regeneratePositionsValue();

        e.preventDefault();
        return false;
      });

      $(document).on('click', '.algolia_merchandising_items_table a.up', function(e) {
        var $row = $(this).closest('tr'),
          $previousRow = $row.prev();

        if ($previousRow.length > 0) {
          $previousRow.insertAfter($row);
          pinIt($row);
        }

        e.preventDefault();
        return false;
      });

      $(document).on('click', '.algolia_merchandising_items_table a.down', function(e) {
        var $row = $(this).closest('tr'),
          $nextRow = $row.next();

        if ($nextRow.length > 0) {
          $nextRow.insertBefore($row);
          pinIt($row);
        }

        e.preventDefault();
        return false;
      });

      var initAutocomplete = function() {
        var client = algoliaAdminBundle.algoliasearch(config.appId, config.apiKey),
          index = client.initIndex(config.indexName),
          template = algoliaAdminBundle.Hogan.compile($('#algolia_merchandising_autocomplete_hit').html()),
          options = {
            hitsPerPage: config.searchParameters.hitsPerPage + 5,
            facetFilters: config.searchParameters.facetFilters
          },
          sources = [{
            source: algoliaAdminBundle.autocomplete.sources.hits(index, options),
            name: 'products',
            templates: {
              header: '<div class="header">Press <b>enter</b> to select, <b>↑</b> or <b>↓</b> to navigate, <b>esc</b> to dismiss</div>',
              suggestion: function (hit) {
                return template.render(hit);
              }
            }
          }];

        $('#algolia_merchandising_autocomplete')
          .autocomplete({ debug: false, hint: false }, sources)
          .on('autocomplete:selected', function (e, suggestion) {
            var $existingRow = $('.algolia_merchandising_items_table tbody tr[data-objectid="' + suggestion.objectID + '"]');

            if ($existingRow.length > 0) {
              var $firstRow = $('.algolia_merchandising_items_table tbody tr').first();
              $existingRow.insertBefore($firstRow);
            }
            else {
              var newRowTemplateHtml = $('#algolia_merchandisign_table_row').html(),
                newRowTemplate = algoliaAdminBundle.Hogan.compile(newRowTemplateHtml),
                rowHtml = newRowTemplate.render(suggestion);

              $('.algolia_merchandising_items_table tbody').prepend(rowHtml);
              $('.algolia_merchandising_items_table tbody tr').last().remove();
            }

            var $firstRow = $('.algolia_merchandising_items_table tbody tr').first();
            pinIt($firstRow);
          });
      };

      var initSortableTable = function() {
        $('.algolia_merchandising_items_table tbody').sortable({
          containment: 'parent',
          items: 'tr',
          tolerance: 'pointer',
          helper: sortableHelper,
          start: function (event, ui) {
            $(ui.item).css('margin-left', '10px');
          },
          stop: function (event, ui) {
            var $row = $(ui.item[0]);
            pinIt($row);
          }
        });

        $('.algolia_merchandising_items_table tbody tr td').css('cursor', 'move');
      };

      var addFacetsToSearch = function() {
        $("#algolia_merchandising_facet_wrapper").appendTo("#algolia_merchandising_items_left_container");
      }

      var pinIt = function($row) {
        if ($row.hasClass('pinned') === false) {
          $row.addClass('pinned');
        }

        regeneratePositionsValue();
      };

      var regeneratePositionsValue = function() {
        var $positionsInput = $('input[name="algolia_merchandising_positions"]'),
          positions = {};

        $('.algolia_merchandising_items_table tbody tr').each(function(position) {
          if ($(this).hasClass('pinned')) {
            var objectId = $(this).data('objectid');
            positions[objectId] = position;
          }
        });

        $positionsInput.val(JSON.stringify(positions));
      };

      var sortableHelper = function(e, ui) {
        ui.children().each(function() {
          $(this).width($(this).width());
        });

        return ui;
      };



    });
  });

  var createISWidgetContainer = function (attributeName) {
    var div = document.createElement('div');
    div.className = 'is-widget-container-' + attributeName.split('.').join('_');

    return div;
  };

</script>
