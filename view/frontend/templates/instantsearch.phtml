<?php
/** @var \Algolia\AlgoliaSearch\Block\Algolia $block */

$config = $block->getConfigHelper();

$catalogSearchHelper = $block->getCatalogSearchHelper();

$group_id = $block->getGroupId();

$currency_code = $block->getCurrencyCode();
$price_key = $config->isCustomerGroupsEnabled($block->getStoreId()) ? '.'.$currency_code.'.group_'.$group_id : '.'.$currency_code.'.default';

$image_base_url = $block->getBaseUrl();

$title = '';
$description = '';
$content = '';
$imgHtml = '';

if ($config->isInstantEnabled() && $config->replaceCategories() && $block->getRequest()->getControllerName() == 'category') {
    $category = $block->getCurrentCategory();
    $title = $category->getName();

    if ($category && $category->getDisplayMode() !== 'PAGE') {
        $category->getUrlInstance()->setStore($block->getStoreId());
    }
}

?>

<!-- Instantsearch wrapper template -->
<script type="text/template" id="instant_wrapper_template">
    {{#findAutocomplete}}
    <div id="algolia-autocomplete-container"></div>
    {{/findAutocomplete}}
    <div id="algolia_instant_selector" class="<?php echo count($config->getFacets()) > 0 ? ' with-facets' : '' ?>">

        <?php if ($title || $imgHtml || $description || $content): ?>
            <div class="row">
                <div class="col-md-12">
                    <div id="algolia-static-content">
                        <div class="page-title category-title">
                            <h1><?php echo $title; ?></h1>
                        </div>
                        <div>
                            <?php echo $imgHtml; ?>
                        </div>
                        <div class="category-description std">
                            <?php echo $description; ?>
                        </div>
                        <?php echo $content; ?>
                    </div>
                </div>
            </div>
        <?php endif; ?>

        <div class="row">
            <div class="col-md-3" id="algolia-left-container">
                <div id="refine-toggle" class="visible-xs visible-sm">+ <?php echo __('Refine'); ?></div>
                <div class="hidden-xs hidden-sm" id="instant-search-facets-container">
                    <div id="current-refinements"></div>
                </div>
            </div>

            <div class="col-md-9" id="algolia-right-container">
                <div class="row">
                    <div class="col-md-12">
                        <div>
                            {{#second_bar}}
                            <div id="instant-search-bar-container">
                                <div id="instant-search-box">
                                    <div class="instant-search-bar-label">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="magnifying-glass" width="24"
                                             height="24" viewBox="0 0 128 128">
                                            <g transform="scale(4)">
                                                <path stroke-width="3" d="M19.5 19.582l9.438 9.438"></path>
                                                <circle stroke-width="3" cx="12" cy="12" r="10.5" fill="none"></circle>
                                                <path
                                                    d="M23.646 20.354l-3.293 3.293c-.195.195-.195.512 0 .707l7.293 7.293c.195.195.512.195.707 0l3.293-3.293c.195-.195.195-.512 0-.707l-7.293-7.293c-.195-.195-.512-.195-.707 0z"></path>
                                            </g>
                                        </svg>
                                        <span><?php echo __('Current search'); ?></span>
                                    </div>
                                    <div class="instant-search-bar-wrapper">
                                        <label for="instant-search-bar">
                                            <?php echo __('Search:'); ?>
                                        </label>

                                        <input placeholder="<?php echo __('Search for products'); ?>"
                                               id="instant-search-bar" type="text" autocomplete="off" spellcheck="false"
                                               autocorrect="off" autocapitalize="off"/>

                                        <img class="clear-query-instant"
                                             src="<?php echo $block->getViewFileUrl('Algolia_AlgoliaSearch::cross.png'); ?>"/>
                                    </div>
                                </div>
                            </div>
                            {{/second_bar}}
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div>
                        <div class="hits">
                            <div class="infos">
                                <div class="pull-left" id="algolia-stats"></div>
                                <div class="pull-right">
                                    <div class="sort-by-label pull-left">
                                        <?php echo __('SORT BY'); ?>
                                    </div>
                                    <div class="pull-left" id="algolia-sorts"></div>
                                </div>
                                <div class="clearfix"></div>
                            </div>
                            <div id="instant-search-results-container"></div>
                        </div>
                    </div>
                    <div class="clearfix"></div>
                </div>

                <div class="text-center">
                    <div id="instant-search-pagination-container"></div>
                </div>
            </div>
        </div>

    </div>
</script>

<!-- Product hit template -->
<script type="text/template" id="instant-hit-template">
    <div class="col-md-4 col-sm-6">
        <div class="result-wrapper">
            <a href="{{url}}" class="result">
                <div class="result-content">
                    <div class="result-thumbnail">
                        {{#image_url}}<img src="<?php echo $image_base_url; ?>{{{ image_url }}}"/>{{/image_url}}
                        {{^image_url}}<span class="no-image"></span>{{/image_url}}
                    </div>
                    <div class="result-sub-content">
                        <h3 class="result-title text-ellipsis">
                            {{{ _highlightResult.name.value }}}
                        </h3>
                        <div class="ratings">
                            <div class="result-sub-content">
                                <div class="ratings">
                                    <div class="rating-box">
                                        <div class="rating" style="width:{{rating_summary}}%" width="148"
                                             height="148"></div>
                                    </div>
                                </div>
                                <div class="price">
                                    <div class="price-wrapper">
                                        <div>
                                            <span
                                                class="after_special {{#price<?php echo $price_key; ?>_original_formated}}promotion{{/price<?php echo $price_key; ?>_original_formated}}">
                                                {{price<?php echo $price_key; ?>_formated}}
                                            </span>

                                            {{#price<?php echo $price_key; ?>_original_formated}}
                                                <span class="before_special">
                                                    {{price<?php echo $price_key; ?>_original_formated}}
                                                </span>
                                            {{/price<?php echo $price_key; ?>_original_formated}}
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="result-description text-ellipsis">{{{ _highlightResult.description.value }}}</div>

                        {{#isAddToCartEnabled}}
                        {{#in_stock}}
                        <form action="<?php echo $block->getBaseUrl(); ?>/checkout/cart/add/product/{{objectID}}"
                              method="post">
                            <input type="hidden" name="form_key"
                                   value="<?php echo $block->getFormKey(); ?>"/>
                            <input type="hidden" name="qty" value="1">
                            <button type="submit"><?php echo __('Add to Cart'); ?></button>
                        </form>
                        {{/in_stock}}
                        {{/isAddToCartEnabled}}
                    </div>
                </div>
                <div class="clearfix"></div>
            </a>
        </div>
    </div>
</script>

<!-- Search statistics template (used for displaying hits' count and time of query) -->
<script type="text/template" id="instant-stats-template">
    {{#hasOneResult}}<strong>1</strong> <?php echo __('result'); ?> found{{/hasOneResult}}
    {{#hasManyResults}}{{^hasNoResults}}{{first}}-{{last}} out of{{/hasNoResults}} <strong>{{#helpers.formatNumber}}{{nbHits}}{{/helpers.formatNumber}} <?php echo __('results found'); ?></strong>{{/hasManyResults}}
    <?php echo __('in'); ?> {{seconds}} <?php echo __('seconds'); ?>
</script>

<!-- Basic facet template -->
<script type="text/template" id="facet-template">
    <div class="sub_facet {{#isRefined}}checked{{/isRefined}}">
        <input class="facet_value" {{#isRefined}}checked{{/isRefined}} type="checkbox">
        {{name}}
        <span class="count">{{count}}</span>
    </div>
</script>

<!-- Current refinements template -->
<script type="text/template" id="current-refinements-template">
    <div class="cross-wrapper">
        <img src="<?php echo $block->getViewFileUrl('Algolia_AlgoliaSearch::cross.png'); ?>"/>
    </div>
    <div class="current-refinement-wrapper">
        {{#label}}
        <span class="current-refinement-label">{{label}}{{^operator}}:{{/operator}}</span>
        {{/label}}
        {{#operator}}
        {{{displayOperator}}}
        {{/operator}}
        {{#exclude}}-{{/exclude}}
        <span class="current-refinement-name">{{name}}</span>
    </div>
</script>

<script type="text/javascript">
    //<![CDATA[

    requirejs(['algoliaBundle'], function(algoliaBundle) {
        algoliaBundle.$(function ($) {

            /** We have nothing to do here if instantsearch is not enabled **/
            if (!algoliaConfig.instant.enabled || !(algoliaConfig.isSearchPage || !algoliaConfig.autocomplete.enabled)) {
                return;
            }

            if ($(algoliaConfig.instant.selector).length <= 0) {
                throw '[Algolia] Invalid instant-search selector: ' + algoliaConfig.instant.selector;
            }

            if (algoliaConfig.autocomplete.enabled && $(algoliaConfig.instant.selector).find(algoliaConfig.autocomplete.selector).length > 0) {
                throw '[Algolia] You can\'t have a search input matching "' + algoliaConfig.autocomplete.selector +
                '" inside you instant selector "' + algoliaConfig.instant.selector + '"';
            }

            var findAutocomplete = algoliaConfig.autocomplete.enabled && $(algoliaConfig.instant.selector).find('#algolia-autocomplete-container').length > 0;
            if (findAutocomplete) {
                $(algoliaConfig.instant.selector).find('#algolia-autocomplete-container').remove();
            }

            /**
             * Setup wrapper
             *
             * For templating is used Hogan library
             * Docs: http://twitter.github.io/hogan.js/
             **/
            var wrapperTemplate = algoliaBundle.Hogan.compile($('#instant_wrapper_template').html());
            var instant_selector = !algoliaConfig.autocomplete.enabled ? algoliaConfig.autocomplete.selector : "#instant-search-bar";

            var div = document.createElement('div');
            $(div).addClass('algolia-instant-results-wrapper');

            $(algoliaConfig.instant.selector).addClass('algolia-instant-replaced-content');
            $(algoliaConfig.instant.selector).wrap(div);

            $('.algolia-instant-results-wrapper').append('<div class="algolia-instant-selector-results"></div>');
            $('.algolia-instant-selector-results').html(wrapperTemplate.render({
                second_bar: algoliaConfig.autocomplete.enabled,
                findAutocomplete: findAutocomplete
            })).show();

            /**
             * Initialise instant search
             * For rendering instant search page is used Algolia's instantsearch.js library
             * Docs: https://community.algolia.com/instantsearch.js/documentation/
             **/
            var search = algoliaBundle.instantsearch({
                appId: algoliaConfig.applicationId,
                apiKey: algoliaConfig.apiKey,
                indexName: algoliaConfig.indexName + '_products',
                urlSync: {
                    useHash: true,
                    trackedParameters: ['query', 'page', 'attribute:*', 'index']
                }
            });

            search.client.addAlgoliaAgent('Magento ' + algoliaConfig.extensionVersion);

            /**
             * Custom widget - this widget is used to refine results for search page or catalog page
             * Docs: https://community.algolia.com/instantsearch.js/documentation/#custom-widgets
             **/
            search.addWidget({
                getConfiguration: function () {
                    if (algoliaConfig.request.query.length > 0 && location.hash.length < 1) {
                        return {query: algoliaConfig.request.query}
                    }
                    return {};
                },
                init: function (data) {
                    if (algoliaConfig.request.refinement_key.length > 0) {
                        data.helper.toggleRefine(algoliaConfig.request.refinement_key, algoliaConfig.request.refinement_value);
                    }

                    if (algoliaConfig.isCategoryPage) {
                        data.helper.addNumericRefinement('visibility_catalog', '=', 1);
                    }
                    else {
                        data.helper.addNumericRefinement('visibility_search', '=', 1);
                    }
                },
                render: function (data) {
                    if (!algoliaConfig.isSearchPage) {
                        if (data.results.query.length === 0) {
                            $('.algolia-instant-replaced-content').show();
                            $('.algolia-instant-selector-results').hide();
                        }
                        else {
                            $('.algolia-instant-replaced-content').hide();
                            $('.algolia-instant-selector-results').show();
                        }
                    }
                }
            });

            /**
             * Search box
             * Docs: https://community.algolia.com/instantsearch.js/documentation/#searchbox
             **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.searchBox({
                    container: instant_selector,
                    placeholder: '<?php echo __('Search for products'); ?>'
                })
            );

            /**
             * Stats
             * Docs: https://community.algolia.com/instantsearch.js/documentation/#stats
             **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.stats({
                    container: '#algolia-stats',
                    templates: {
                        body: $('#instant-stats-template').html()
                    },
                    transformData: function (data) {
                        data.first = data.page * data.hitsPerPage + 1;
                        data.last = Math.min(data.page * data.hitsPerPage + data.hitsPerPage, data.nbHits);
                        data.seconds = data.processingTimeMS / 1000;

                        return data;
                    }
                })
            );

            /**
             * Sorting
             * Docs: https://community.algolia.com/instantsearch.js/documentation/#sortbyselector
             **/
            algoliaConfig.sortingIndices.unshift({
                name: algoliaConfig.indexName + '_products',
                label: '<?php echo __('Relevance'); ?>'
            });

            search.addWidget(
                algoliaBundle.instantsearch.widgets.sortBySelector({
                    container: '#algolia-sorts',
                    indices: algoliaConfig.sortingIndices,
                    cssClass: 'form-control'
                })
            );

            /**
             * Products' hits
             * This widget renders all products into result page
             * Docs: https://community.algolia.com/instantsearch.js/documentation/#hits
             **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.hits({
                    container: '#instant-search-results-container',
                    templates: {
                        item: $('#instant-hit-template').html()
                    },
                    transformData: {
                        item: function (hit) {
                            hit = transformHit(hit, algoliaConfig.priceKey);
                            hit.isAddToCartEnabled = algoliaConfig.instant.isAddToCartEnabled;

                            return hit;
                        }
                    },
                    hitsPerPage: algoliaConfig.hitsPerPage
                })
            );

            /**
             * Custom widget - Suggestions
             * This widget renders suggestion queries which might be interesting for your customer
             * Docs: https://community.algolia.com/instantsearch.js/documentation/#custom-widgets
             **/
            search.addWidget({
                suggestions: [],
                init: function () {
                    if (algoliaConfig.showSuggestionsOnNoResultsPage) {
                        var $this = this;
                        $.each(algoliaConfig.popularQueries.slice(0, Math.min(4, algoliaConfig.popularQueries.length)), function (i, query) {
                            query = $('<div>').html(query).text(); //xss
                            $this.suggestions.push('<a href="' + algoliaConfig.baseUrl + '/catalogsearch/result/?q=' + encodeURIComponent(query) + '">' + query + '</a>');
                        });
                    }
                },
                render: function (data) {
                    if (data.results.hits.length === 0) {
                        var content = '<div class="no-results">';
                        content += '<div><b><?php echo __('No products for query'); ?> "' + $("<div>").text(data.results.query).html() + '</b>"</div>';
                        content += '<div class="popular-searches">';

                        if (algoliaConfig.showSuggestionsOnNoResultsPage && this.suggestions.length > 0) {
                            content += '<div><?php echo __('You can try one of the popular search queries'); ?></div>' + this.suggestions.join(', ');
                        }

                        content += '</div>';
                        content += '<?php echo __('or'); ?> <a href="' + algoliaConfig.baseUrl + '/catalogsearch/result/?q=__empty__"><?php echo __('See all products'); ?></a>'

                        content += '</div>';

                        $('#instant-search-results-container').html(content);
                    }
                }
            });

            /** Setup attributes for current refinements widget **/
            var attributes = [];
            $.each(algoliaConfig.facets, function (i, facet) {
                var name = facet.attribute;

                if (name === 'categories') {
                    if (algoliaConfig.isCategoryPage) {
                        return;
                    }
                    name = 'categories.level0';
                }

                if (name === 'price') {
                    name = facet.attribute + algoliaConfig.priceKey
                }

                attributes.push({
                    name: name,
                    label: facet.label ? facet.label : facet.attribute
                });
            });

            /**
             * Widget name: Current refinements
             * Widget displays all filters and refinements applied on query. It also let your customer to clear them one by one
             * Docs: https://community.algolia.com/instantsearch.js/documentation/#currentrefinedvalues
             **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.currentRefinedValues({
                    container: '#current-refinements',
                    cssClasses: {
                        root: 'facet'
                    },
                    templates: {
                        header: '<div class="name">' + '<?php echo __('Selected Filters'); ?>' + '</div>',
                        clearAll: '<?php echo __('Clear all'); ?>',
                        item: $('#current-refinements-template').html()
                    },
                    attributes: attributes,
                    onlyListedAttributes: true
                })
            );

            /**
             * Here are specified custom attributes widgets which require special code to run properly
             * Custom widgets can be added to this object like [attributeName]: function(facet, templates)
             * Function must return instantsearch.widget object
             * Docs: https://community.algolia.com/instantsearch.js/documentation/#widgets
             **/
            var customAttributeFacet = {
                categories: function (facet, templates) {
                    var hierarchical_levels = [];
                    for (var l = 0; l < 10; l++)
                        hierarchical_levels.push('categories.level' + l.toString());

                    var hierarchicalMenuParams = {
                        container: facet.wrapper.appendChild(document.createElement('div')),
                        attributes: hierarchical_levels,
                        separator: ' /// ',
                        alwaysGetRootLevel: true,
                        limit: algoliaConfig.maxValuesPerFacet,
                        templates: templates,
                        sortBy: ['name:asc'],
                        cssClasses: {
                            list: 'hierarchical',
                            root: 'facet hierarchical'
                        }
                    };

                    hierarchicalMenuParams.templates.item = '' +
                        '<div class="ais-hierearchical-link-wrapper">' +
                        '<a class="{{cssClasses.link}}" href="{{url}}">{{name}}' +
                        '{{#isRefined}}<img class="cross-circle" src="<?php echo $block->getViewFileUrl('Algolia_AlgoliaSearch::cross-circle.png'); ?>"/>{{/isRefined}}' +
                        '<span class="{{cssClasses.count}}">{{#helpers.formatNumber}}{{count}}{{/helpers.formatNumber}}</span></a>' +
                        '</div>';

                    if (algoliaConfig.request.path.length > 0) {
                        hierarchicalMenuParams.rootPath = algoliaConfig.request.path;
                    }

                    return algoliaBundle.instantsearch.widgets.hierarchicalMenu(hierarchicalMenuParams);
                }
            };

            /** Add all facet widgets to instatnsearch object **/
            var wrapper = document.getElementById('instant-search-facets-container');
            $.each(algoliaConfig.facets, function (i, facet) {

                if (facet.attribute.indexOf("price") !== -1)
                    facet.attribute = facet.attribute + algoliaConfig.priceKey;

                facet.wrapper = wrapper;

                var templates = {
                    header: '<div class="name">' + (facet.label ? facet.label : facet.attribute) + '</div>'
                };

                var widget = customAttributeFacet[facet.attribute] !== undefined ?
                    customAttributeFacet[facet.attribute](facet, templates) :
                    getFacetWidget(facet, templates);

                search.addWidget(widget);
            });

            /**
             * Pagination
             * Docs: https://community.algolia.com/instantsearch.js/documentation/#pagination
             **/
            search.addWidget(
                algoliaBundle.instantsearch.widgets.pagination({
                    container: '#instant-search-pagination-container',
                    cssClass: 'algolia-pagination',
                    showFirstLast: false,
                    maxPages: 1000,
                    labels: {
                        previous: '<?php echo __('Previous page'); ?>',
                        next: '<?php echo __('Next page'); ?>'
                    },
                    scrollTo: 'body'
                })
            );

            var isStarted = false;
            function startInstantSearch() {
                if(isStarted == true) {
                    return;
                }

                search.start();

                handleInputCrossInstant($(instant_selector));

                var instant_search_bar = $(instant_selector);
                if (instant_search_bar.is(":focus") === false) {
                    focusInstantSearchBar(search, instant_search_bar);
                }

                if (algoliaConfig.autocomplete.enabled) {
                    $('#search_mini_form').addClass('search-page');
                }

                $(document).on('click', '.ais-hierarchical-menu--link, .ais-refinement-list--checkbox', function () {
                    focusInstantSearchBar(search, instant_search_bar);
                });

                isStarted = true;
            }

            /** Initialise searching **/
            startInstantSearch();
        });
    });

    //]]>
</script>
